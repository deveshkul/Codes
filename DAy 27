

Floyd Warshall
MediumAccuracy: 32.89%Submissions: 118K+Points: 4
Fast-Track your resumes to top tech companies and get the job you deserve! Register for Job-A-Thon Hiring Challenge  

banner
The problem is to find the shortest distances between every pair of vertices in a given edge-weighted directed graph. The graph is represented as an adjacency matrix of size n*n. Matrix[i][j] denotes the weight of the edge from i to j. If Matrix[i][j]=-1, it means there is no edge from i to j.
Do it in-place.

Example 1:

Input: matrix = {{0,25},{-1,0}}

Output: {{0,25},{-1,0}}

Explanation: The shortest distance between
every pair is already given(if it exists).
Example 2:

Input: matrix = {{0,1,43},{1,0,6},{-1,-1,0}}

Output: {{0,1,7},{1,0,6},{-1,-1,0}}

Explanation: We can reach 2 from 0 as 0->1->2
and the cost will be 1+6=7 which is less than 
43.
Your Task:
You don't need to read, return or print anything. Your task is to complete the function shortest_distance() which takes the matrix as input parameter and modifies the distances for every pair in-place.

Expected Time Complexity: O(n3)
Expected Space Complexity: O(1)

Constraints:
1 <= n <= 100
-1 <= matrix[ i ][ j ] <= 1000










C++ code
 
class Solution {
  public:
	void shortest_distance(vector<vector<int>>&matrix){
	    // Code here
	    int n=matrix.size();
	    
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<n;j++)
	        {
	            for(int k=0;k<n;k++)
	            {
	                
	                if(i==j||j==k||k==i)
	                    matrix[j][k]=matrix[j][k];
	                
	                else
	                {
	                    if(matrix[j][k]==-1)
	                    {
	                        if(matrix[j][i]!=-1&&matrix[i][k]!=-1)
	                        {
	                            matrix[j][k]=matrix[j][i]+matrix[i][k];
	                        }
	                    }
	                    else
	                    {
	                        if(matrix[j][i]!=-1&&matrix[i][k]!=-1)
	                        {
	                            matrix[j][k]=min(matrix[j][k],matrix[j][i]+matrix[i][k]);
	                        }
	                    }
	                }
	            }
	        }
	    }
	}
};
