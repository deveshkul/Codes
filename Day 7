Maximum sum Rectangle
MediumAccuracy: 49.78%Submissions: 36K+Points: 4
Maximize your earnings for your published articles in Dev Scripter 2024! Gain recognition & extra compensation while elevating your tech profile.

banner
Given a 2D matrix M of dimensions RxC. Find the maximum sum submatrix in it.

Example 1:

Input:
R=4
C=5
M=[[1,2,-1,-4,-20],
[-8,-3,4,2,1],
[3,8,10,1,3],
[-4,-1,1,7,-6]]
Output:
29
Explanation:
The matrix is as follows and the
blue rectangle denotes the maximum sum
rectangle.
Thumbnail
Example 2:

Input:
R=2
C=2
M=[[-1,-2],[-3,-4]]
Output:
-1
Explanation:
Taking only the first cell is the 
optimal choice.

Your Task:
You don't need to read input or print anything. Your task is to complete the function maximumSumRectangle() which takes the number R, C, and the 2D matrix M as input parameters and returns the maximum sum submatrix.


Expected Time Complexity:O(R*R*C)
Expected Auxillary Space:O(R*C)
 

Constraints:
1<=R,C<=500
-1000<=M[i][j]<=1000



C++ Code
class Solution {
  public:
    int Kadane(vector<int>& arr){
        int max_Sum = INT_MIN;
        int presum = 0;
        for(int i=0;i<arr.size();i++){
            presum += arr[i];
            if(presum>max_Sum){
                max_Sum = presum;
            }
            if(presum<0){
                presum = 0;
            }
        }
        return max_Sum;
    }
  
    int maximumSumRectangle(int R, int C, vector<vector<int>> M) {
        vector<vector<int>> dp(R+1,vector<int>(C+1,0));//make a dp vector to store prefix sums for each row
        for(int i=0;i<R;i++){
            for(int j=0;j<C;j++){
                if(j==0){
                    dp[i][j] = M[i][j];
                }
                else{
                    dp[i][j] = dp[i][j-1] + M[i][j];
                }
            }
        }
        
        vector<int> temp(R,0);//to store a 1D vector signifying the sums of rows between columns left and right
        int ans = INT_MIN;
        for(int left = 0;left<C;left++){
            for(int right = left;right<C;right++){
                for(int i=0;i<R;i++){
                    if(left == 0){
                        temp[i] = dp[i][right];
                    }
                    else{
                        temp[i] = dp[i][right]-dp[i][left-1];
                    }
                }
                ans = max(ans,Kadane(temp));
            }
        }
        return ans;
    }


};
